% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/turbo_code.R
\name{TurboEncode}
\alias{TurboEncode}
\title{Encode a message with the turbo-code.}
\usage{
TurboEncode(message, permutation.vector = NULL, coder.info = NULL,
  parity.index = coder.info$N, punctuation.matrix = NULL,
  visualize = FALSE)
}
\arguments{
\item{message}{Message which will be encoded.}

\item{permutation.vector}{Permutation vector which will be created with \code{\link{TurboGetPermutation}}.}

\item{coder.info}{Coder which will be created with \code{\link{ConvGenerateEncoder}} or \code{\link{ConvGenerateRscEncoder}}.}

\item{parity.index}{Index to decide which exit of the coder will be used for the encoding (>1).
Default value is always the last exit of the coder.}

\item{punctuation.matrix}{Punctuation matrix to puncture the output, will be created with \code{\link{TurboGetPunctuationMatrix}}.}

\item{visualize}{Flag to decide whether to create a visualization pdf or not.}
}
\value{
Encoded message, will be a list if the output was punctured (list with original and punctured).
}
\description{
This functions takes a message and encode it with the turbo-code procedure. The message
will be encoded in 2 identical systematic encoder, but before the message will be encoded in the encoder 2
the message will be permutated with an interleaver. To increase the minimal distance between 2 code words
the interleaver is needed. The systematic encoder must have 2 exists and it must be
an systematic encoder which means that the input is redirected directly to the output.
Because of the systematic encoders the original message must be transmitted only once, so
this procedure reduces the code rate of the whole encoder. After the 2 encoders the
resulting encoded messages are interleaved into one stream and transmitted to the exit.
Only one exit of the systematic encoder will be used, so the index of the output can be
determined. The punctuation matrix removes all bits where the matrix is zero, so the
code rate is increased.
}
\examples{
input <- c(1,0,1,1,0)

#default coder and permutation vector
message.encoded <- TurboEncode(input)
print(message.encoded)

#custom coder and permutation vector
coder <- ConvGenerateRscEncoder(2, 2, c(5, 7))
perm <- TurboGetpermutation(length(input), coder, "RANDOM")
message.encoded <- TurboEncode(input, perm, coder)
print(message.encoded)

#encoding with punctuation matrix
punct <- TurboGetPunctuationMatrix(c(1,1,0,1,0,1))
message.encoded.punct <- TurboEncode(input, perm, coder, punctuation.matrix = punct)
print(message.encoded.punct$original)
print(message.encoded.punct$punctured)

}
\author{
Witsch Daniel
}

