% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/turbo_code_rcpp.R
\name{TurboEncode}
\alias{TurboEncode}
\title{Kodieren einer Nachricht mittels dem Turbo-Code-Verfahren}
\usage{
TurboEncode(message, permutation.vector = NULL, coder.info = NULL,
  parity.index = coder.info$N, punctuation.matrix = NULL,
  visualize = FALSE)
}
\arguments{
\item{message}{Message which will be encoded.}

\item{permutation.vector}{Permutation vector which will be created with \code{\link{TurboGetPermutation}}.}

\item{coder.info}{Coder which will be created with \code{\link{GenerateConvEncoder}} or \code{\link{GenerateRscEncoder}}.}

\item{parity.index}{Index to decide which exit of the coder will be used for the encoding (>1).
Default value is always the last exit of the coder.}

\item{punctuation.matrix}{Punctuation matrix to puncture the output, will be created with \code{\link{TurboGetPunctuationMatrix}}.}

\item{visualize}{Flag to decide whether to create a visualization pdf or not.}
}
\value{
Encoded message, will be a list if the output was punctured (list with original and punctured).
}
\description{
Kodiert eine Nachricht mittels dem Turbo-Code-Verfahren. Dabei wird die Nachricht in 2 systematische Kodierer
gesteckt, wobei bei einem Kodierer die Nachricht permutiert verarbeitet wird. Der mitgegebene Kodierer muss
mindestens 2 Ausgänge haben und sollte Systematisch sein. Dadurch wird der erste Ausgang automatisch
bei beiden Kodierern durchgeschalten, somit muss die Ausgangsnachricht nur einmal übertragen werden,
dadurch wird die Koderate verbessert. Um den Minimalabstand der Kodierer zu erhöhen, wird die Nachricht
permutiert in den 2ten Kodierer geschickt. Am Ende wird die Ausgangsnachricht mit den beiden kodierten Nachrichten
aus den Kodierern verknüpft und retour gegeben. Da nur ein Ausgang von einem Kodierer verwendet wir, muss der Index
des Ausgangs angegeben werden.
}
\examples{
input <- c(1,0,1,1,0)

#default coder and permutation vector
message.encoded <- TurboEncode(input)
print(message.encoded)

#custom coder and permutation vector
coder <- GenerateRscEncoder(2, 2, c(5, 7))
perm <- TurboGetpermutation(length(input), coder, "RANDOM")
message.encoded <- TurboEncode(input, perm, coder)
print(message.encoded)

#encoding with punctuation matrix
punct <- TurboGetPunctuationMatrix(c(1,1,0,1,0,1))
message.encoded.punct <- TurboEncode(input, perm, coder, punctuation.matrix = punct)
print(message.encoded.punct$original)
print(message.encoded.punct$punctured)
}
\author{
Witsch Daniel
}

