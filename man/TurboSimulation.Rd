% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/turbo_code.R
\name{TurboSimulation}
\alias{TurboSimulation}
\title{Function to make a automatic simulation of an coder with different signal/noise ratio.}
\usage{
TurboSimulation(coder = NULL, permutation.type = "PRIMITIVE",
  permutation.args = list(root = 0), decode.iterations = 5,
  msg.length = 100, min.db = 0.1, max.db = 2, db.interval = 0.1,
  iterations.per.db = 100, punctuation.matrix = NULL, visualize = FALSE)
}
\arguments{
\item{coder}{Coder which will be created with \code{\link{ConvGenerateEncoder}} or \code{\link{ConvGenerateRscEncoder}}.}

\item{permutation.type}{Type of permutation vector.}

\item{permutation.args}{Arguments to the \code{\link{TurboGetPermutation}} function.}

\item{decode.iterations}{Amount of decoding iterations inside the turbo decoder.}

\item{msg.length}{Length of the randomly created message.}

\item{min.db}{Start value of the signal/noise ratio.}

\item{max.db}{End value of the signal/noise ration.}

\item{db.interval}{Interval which will be added to the actual signal/noise ratio after all
iterations are applied.}

\item{iterations.per.db}{Amount of iterations each signal/noise ration step.}

\item{punctuation.matrix}{Punctuation matrix to puncture the output, will be created with \code{\link{TurboGetPunctuationMatrix}}.}

\item{visualize}{Flag to decide whether to create a visualization pdf or not.}
}
\value{
DataFrame which contains the bit error rate for each signal/noise ratio step.
}
\description{
This easy functions makes it possible to compare different coders. The function encode
a random message, apply noise to the code and then decode the code. This will be computed
many times and after all iterations the bit error rate will be calculated. This procedure
is applied to different signal/noise ratios. The result will be printed in a graph, when
visualization flag is set to TRUE.
}
\examples{

#all default parameters
TurboSimulation()

#without punctuation
coder <- ConvGenerateRscEncoder(2, 2, c(5, 7))
TurboSimulation(coder, "RANDOM", NULL, 5, 10, 0.01, 1, 0.05, 50, NULL, TRUE)

}

