// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_generateMatrices_nsc
List c_generateMatrices_nsc(int N, int M, IntegerVector generator);
RcppExport SEXP channelcoding_c_generateMatrices_nsc(SEXP NSEXP, SEXP MSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type generator(generatorSEXP);
    __result = Rcpp::wrap(c_generateMatrices_nsc(N, M, generator));
    return __result;
END_RCPP
}
// c_generateMatrices_rsc
List c_generateMatrices_rsc(int N, int M, IntegerVector generator);
RcppExport SEXP channelcoding_c_generateMatrices_rsc(SEXP NSEXP, SEXP MSEXP, SEXP generatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type generator(generatorSEXP);
    __result = Rcpp::wrap(c_generateMatrices_rsc(N, M, generator));
    return __result;
END_RCPP
}
// c_convolutionEncode
IntegerVector c_convolutionEncode(IntegerVector input, int N, int M, IntegerMatrix nextState, IntegerMatrix output, int nsc, IntegerVector termination, int terminate);
RcppExport SEXP channelcoding_c_convolutionEncode(SEXP inputSEXP, SEXP NSEXP, SEXP MSEXP, SEXP nextStateSEXP, SEXP outputSEXP, SEXP nscSEXP, SEXP terminationSEXP, SEXP terminateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type nextState(nextStateSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type output(outputSEXP);
    Rcpp::traits::input_parameter< int >::type nsc(nscSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type termination(terminationSEXP);
    Rcpp::traits::input_parameter< int >::type terminate(terminateSEXP);
    __result = Rcpp::wrap(c_convolutionEncode(input, N, M, nextState, output, nsc, termination, terminate));
    return __result;
END_RCPP
}
// c_convolutionDecode
List c_convolutionDecode(NumericVector code, int N, int M, IntegerMatrix previousState, IntegerMatrix output);
RcppExport SEXP channelcoding_c_convolutionDecode(SEXP codeSEXP, SEXP NSEXP, SEXP MSEXP, SEXP previousStateSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type code(codeSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type previousState(previousStateSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type output(outputSEXP);
    __result = Rcpp::wrap(c_convolutionDecode(code, N, M, previousState, output));
    return __result;
END_RCPP
}
// c_convolutionDecode_hard
IntegerVector c_convolutionDecode_hard(IntegerVector code, int N, int M, IntegerMatrix previousState, IntegerMatrix output);
RcppExport SEXP channelcoding_c_convolutionDecode_hard(SEXP codeSEXP, SEXP NSEXP, SEXP MSEXP, SEXP previousStateSEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type code(codeSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type previousState(previousStateSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type output(outputSEXP);
    __result = Rcpp::wrap(c_convolutionDecode_hard(code, N, M, previousState, output));
    return __result;
END_RCPP
}
